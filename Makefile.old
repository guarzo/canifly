# CanIFly Makefile
# Simplifies common development and build tasks

# Variables
GO_CMD = go
NPM_CMD = npm
ELECTRON_CMD = electron
DIST_DIR = dist
RELEASE_DIR = release
RENDERER_DIR = renderer

# Go build variables
GO_BINARY_NAME = canifly-backend
GO_MAC_BINARY = $(DIST_DIR)/mac/$(GO_BINARY_NAME)
GO_WIN_BINARY = $(DIST_DIR)/win/$(GO_BINARY_NAME).exe
GO_LINUX_BINARY = $(DIST_DIR)/linux/$(GO_BINARY_NAME)

# Default target
.DEFAULT_GOAL := help

# Help target
.PHONY: help
help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-20s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Development targets
.PHONY: dev
dev: ## Start all development servers (Go, React, Electron)
	$(NPM_CMD) start

.PHONY: dev-go
dev-go: ## Start Go backend in development mode
	DEV_MODE=true $(GO_CMD) run .

.PHONY: dev-react
dev-react: ## Start React frontend development server
	cd $(RENDERER_DIR) && $(NPM_CMD) run dev

.PHONY: dev-electron
dev-electron: ## Start Electron in development mode
	wait-on http://localhost:3113 && $(ELECTRON_CMD) . --no-sandbox

# Build targets
.PHONY: build
build: build-go build-react ## Build both backend and frontend

.PHONY: build-go
build-go: ## Build Go backend for all platforms
	@bash scripts/build.sh backend

.PHONY: build-go-mac
build-go-mac: ## Build Go backend for macOS
	@bash scripts/build.sh mac

.PHONY: build-go-win
build-go-win: ## Build Go backend for Windows
	@bash scripts/build.sh win

.PHONY: build-go-linux
build-go-linux: ## Build Go backend for Linux
	@bash scripts/build.sh linux

.PHONY: build-react
build-react: ## Build React frontend
	@bash scripts/build.sh frontend

# Test targets
.PHONY: test
test: test-go test-react ## Run all tests

.PHONY: test-go
test-go: ## Run Go tests
	@echo "Running Go tests..."
	$(GO_CMD) test ./...

.PHONY: test-react
test-react: ## Run React tests
	@echo "Running React tests..."
	cd $(RENDERER_DIR) && $(NPM_CMD) test

# Lint targets
.PHONY: lint
lint: lint-go lint-react ## Run all linters

.PHONY: lint-go
lint-go: ## Run Go linter
	@echo "Running Go linter..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "golangci-lint not installed. Install with: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"; \
	fi

.PHONY: lint-react
lint-react: ## Run React linter
	@echo "Running React linter..."
	cd $(RENDERER_DIR) && $(NPM_CMD) run lint

# Package targets
.PHONY: package
package: clean build package-app ## Build and package the application

.PHONY: package-app
package-app: ## Package the application with electron-builder
	@echo "Packaging application..."
	$(NPM_CMD) run dist

# Utility targets
.PHONY: clean
clean: ## Clean build artifacts
	@echo "Cleaning build artifacts..."
	rm -rf $(DIST_DIR)
	rm -rf $(RELEASE_DIR)
	rm -rf $(RENDERER_DIR)/dist

.PHONY: deps
deps: ## Install all dependencies
	@echo "Installing npm dependencies..."
	$(NPM_CMD) install
	@echo "Installing renderer dependencies..."
	cd $(RENDERER_DIR) && $(NPM_CMD) install
	@echo "Installing Go dependencies..."
	$(GO_CMD) mod download

.PHONY: release
release: ## Create a release tag for current version
	@echo "Creating release..."
	bash scripts/release.sh

.PHONY: check
check: ## Check environment and dependencies
	@echo "Checking environment..."
	@echo -n "Node.js: "; node --version
	@echo -n "npm: "; npm --version
	@echo -n "Go: "; go version
	@echo -n "Electron: "; electron --version || echo "Not installed globally"
	@echo ""
	@echo "All checks complete!"

# Quick targets for common tasks
.PHONY: run
run: dev ## Alias for 'make dev'

.PHONY: all
all: clean deps build test package ## Run full build pipeline

# Platform-specific package targets
.PHONY: package-mac
package-mac: clean build ## Package for macOS only
	$(NPM_CMD) run dist -- --mac

.PHONY: package-win
package-win: clean build ## Package for Windows only
	$(NPM_CMD) run dist -- --win

.PHONY: package-linux
package-linux: clean build ## Package for Linux only
	$(NPM_CMD) run dist -- --linux