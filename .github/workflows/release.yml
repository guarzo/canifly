name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm ci && cd renderer && npm ci

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386 
          sudo apt-get update
          sudo apt-get install -y wine32
      
      - name: Clean build artifacts
        run: |
          rm -rf dist release
          mkdir dist release

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Build the Electron app
      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run package:app

      # Generate changelog
      - name: Generate Changelog
        id: changelog
        run: |
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --oneline --pretty=format:"- %s")
          else
            echo "No previous tag found, generating initial changelog."
            PREVIOUS_TAG="None"
            CHANGELOG=$(git log --oneline --pretty=format:"- %s")
          fi

          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ env.changelog }}
          draft: false
          prerelease: false

      - name: List release directory files
        run: ls -l release

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "release/CanIFly-Setup-${{ env.VERSION }}.exe"
          asset_name: "CanIFly-Setup-${{ env.VERSION }}.exe"
          asset_content_type: application/x-msdownload