name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm ci && cd renderer && npm ci

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Wine (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo dpkg --add-architecture i386 
          sudo apt-get update
          sudo apt-get install -y wine32 wine64
      
      - name: Clean build artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf dist release
          mkdir -p dist release

      - name: Clean build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path release) { Remove-Item -Recurse -Force release }
          New-Item -ItemType Directory -Force -Path dist
          New-Item -ItemType Directory -Force -Path release
        shell: powershell

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # Build the Electron app for all platforms on Linux
      - name: Build Electron App (Linux - all platforms)
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          npm run dist:linux
          npm run dist:win

      # Build the Electron app for Windows on Windows
      - name: Build Electron App (Windows)
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          npm run dist:win

      # Build the Electron app for macOS on macOS
      - name: Build Electron App (macOS)
        if: matrix.os == 'macos-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
          npm run dist:mac

      - name: List release directory files (Unix)
        if: matrix.os != 'windows-latest'
        run: ls -la release

      - name: List release directory files (Windows)
        if: matrix.os == 'windows-latest'
        run: Get-ChildItem -Path release -Force
        shell: powershell

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: release/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List downloaded artifacts
        run: ls -laR release-artifacts

      # Generate changelog
      - name: Generate Changelog
        id: changelog
        run: |
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --oneline --pretty=format:"- %s")
          else
            echo "No previous tag found, generating initial changelog."
            PREVIOUS_TAG="None"
            CHANGELOG=$(git log --oneline --pretty=format:"- %s")
          fi

          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ env.changelog }}
          draft: false
          prerelease: false
          files: |
            release-artifacts/release-windows-latest/CanIFly-Setup-${{ env.VERSION }}.exe
            release-artifacts/release-ubuntu-latest/CanIFly-${{ env.VERSION }}.AppImage
            release-artifacts/release-ubuntu-latest/canifly_${{ env.VERSION }}_amd64.deb
            release-artifacts/release-macos-latest/CanIFly-${{ env.VERSION }}.dmg
          fail_on_unmatched_files: false